package com.gabrielcastilho.projetoavaliacao.view;

import com.gabrielcastilho.projetoavaliacao.control.FuncionarioController;
import com.gabrielcastilho.projetoavaliacao.model.Funcionario;
import java.awt.event.ActionEvent;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.Period;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Classe principal que contém a parte visual, para o usuário realizar as 
 * operações esperadas, além de visualizar as diversas ordenações solicitadas.
 * 
 * @author gabri
 */
public class Principal extends javax.swing.JFrame {
    private DefaultTableModel modelo;
    private List<Funcionario> funcionarios = new ArrayList<>();
    private FuncionarioController funcController;
    private Funcionario funcionarioMaiorIdade = null;  
    private BigDecimal totalSalarios = BigDecimal.ZERO;
    
    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        iniciaFuncionarios();
        iniciaTabela();
        iniciaComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaFuncionarios = new javax.swing.JTable();
        btnAtualizaSalario = new javax.swing.JButton();
        btnRemoveJoao = new javax.swing.JButton();
        cmbAgrupamento = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabelaFuncionarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabelaFuncionarios);

        btnAtualizaSalario.setText("Aumento 10%");
        btnAtualizaSalario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAtualizaSalarioMouseClicked(evt);
            }
        });

        btnRemoveJoao.setText("Remover funcionário João");
        btnRemoveJoao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRemoveJoaoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmbAgrupamento, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAtualizaSalario, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemoveJoao, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmbAgrupamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAtualizaSalario)
                    .addComponent(btnRemoveJoao))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Realiza a atualização dos salários dos funcionários, aumentando em 10%.
     */
    private void btnAtualizaSalarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAtualizaSalarioMouseClicked
        funcionarios = funcController.atualizaSalario();
        
        geraColunasTabela(0);
        atualizaTabela(0);
        cmbAgrupamento.setSelectedIndex(0);
    }//GEN-LAST:event_btnAtualizaSalarioMouseClicked

    /**
     * Remove o funcionário João da listagem de funcionários.
     */
    private void btnRemoveJoaoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRemoveJoaoMouseClicked
        if (funcionarios.stream().anyMatch(
                funcionario -> funcionario.getNome().equals("João"))){
            funcionarios = funcController.removeFuncionarioJoao();
            
            geraColunasTabela(0);
            atualizaTabela(0);
        }
        else{
            JOptionPane.showMessageDialog(null, 
                                          "Não existe funcionário João", 
                                          "Aviso", 
                                          JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnRemoveJoaoMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    /**
     * Inicia a tabela de funcionários com os dados padrão.
     */
    private void iniciaTabela(){
        geraColunasTabela(0);
        
        atualizaTabela(0);
    }
    
    /**
     * Atualiza a tabela com as colunas necessárias para apresentar as 
     * informações esperadas.
     */
    private void atualizaTabela(int tipoTabela){
        modelo.setRowCount(0);
        
        /**
         * Determina quais as colunas serão utilizadas, com base da seleção do 
         * combo box.
         */
        switch(tipoTabela){
            /**
             * Impressão padrão que é utilizado na maioria das listagens.
             * Nela deve possuir todos os campos da classe Funcionario.
             */
            case 0 -> {
                for(Funcionario funcionario: funcionarios){
                    Object[] novaLinha = {funcionario.getNome(), 
                                          funcionario.retornaDataNascimento(),
                                          funcionario.retornaSalario(), 
                                          funcionario.getFuncao()};
                    modelo.addRow(novaLinha);
                }
            }
            /**
             * Impressão utilizada para atender ao exercicio 3.9
             * Nela é apresentada o funcionário com maior idade dentro da 
             * empresa, mostrando seu nome e a idade atual.
            */
            case 1 -> {
                if (funcionarioMaiorIdade != null){
                    Period periodo = Period.between(
                                     funcionarioMaiorIdade.getDataNascimento(), 
                                     LocalDate.now()
                                     );
                    
                    Object[] novaLinha = {
                        funcionarioMaiorIdade.getNome(), 
                        periodo.getYears()
                    };
                    modelo.addRow(novaLinha);
                }
            }
            /**
             * Impressão utilizada para atender ao exercício 3.11
             * É ajustado as colunas para apresentar o valor total dos salários
             * de funcionários.
             */
            case 2 -> {
                Object[] novaLinha = {
                        totalSalarios
                };
                modelo.addRow(novaLinha);
            }
            /**
             * Impressão utilizada para atender ao exercício 3.12
             * É apresentado o nome do funcionário e quantos salários mínimos
             * correspodem o salário atual dele.
             */
            case 3 -> {
                for(Funcionario funcionario: funcionarios){
                    Object[] novaLinha = {funcionario.getNome(), 
                                          funcController.retornaQuantidadeSalarioMinimo(funcionario)};
                    modelo.addRow(novaLinha);
                }
            }
        }
    }
    
    /**
     * Gera as colunas que serão utilizadas na tabela.
     * 
     * @param tipoTabela
     *   Número de qual tipo de tabela será utilizada.
     *   {
     *      0 -> Colunas utilizadas para os exercícios: 3.3, 3.6, 3.8 e 3.10;
     *      1 -> Colunas utilizadas para o exercício 3.9
     *      2 -> Colunas utilizadas para o exercício 3.11
     *      3 -> Colunas utilizadas para o exercício 3.12
     *   }
     */
    private void geraColunasTabela(int tipoTabela){
        String[] colunas = null;
        
        switch(tipoTabela){
            /**
             * Seleção de colunas utilizadas para os exercícios: 3.3, 3.6, 3.8 e
             * 3.10
             */
            case 0 -> {
                colunas = new String[4];
                colunas[0] = "Nome";
                colunas[1] = "Data Nascimento";
                colunas[2] = "Salário";
                colunas[3] = "Função";
            }
            /**
             * Seleção de colunas utilizadas para o exercício 3.9
             */
            case 1 -> {
                colunas = new String[2];
                colunas[0] = "Nome";
                colunas[1] = "Idade";
            }
            /**
             * Seleção de colunas utilizadas para o exercício 3.11
             */
            case 2 -> {
                colunas = new String[1];
                colunas[0] = "Total Salário";
            }
            /**
             * Seleção de colunas utilizadas para o exercício 3.12
             */
            case 3 -> {
                colunas = new String[2];
                colunas[0] = "Nome";
                colunas[1] = "Média Salário Mínimo";
            }
        }
        
        modelo = new DefaultTableModel(colunas, 0);
        tabelaFuncionarios.setModel(modelo);
    }
    
    /**
     * Inicializa o ComboBox utilizado para determinar as listagens e 
     * apresentações de tela.
     */
    private void iniciaComboBox(){
        String[] opcoes = {"Impressão Padrão", "Agrupar por função", 
                           "Funcionários com aniversário entre mês 10 e 12",
                           "Funcionário com maior idade", 
                           "Funcionários em Ordem Alfabética", 
                           "Total do salário dos funcionários", 
                           "Quantidade de salário mínimo por funcionário"};
        
        DefaultComboBoxModel cmbModel = new DefaultComboBoxModel(opcoes);
        cmbAgrupamento.setModel(cmbModel);
        cmbAgrupamento.setSelectedIndex(0);
        
        cmbAgrupamento.addActionListener((ActionEvent e) -> {
            int indice = cmbAgrupamento.getSelectedIndex();
            
            switch(indice){
                case 0 -> {
                    funcionarios = funcController
                                   .ordemPadraoFuncionarios();
                    geraColunasTabela(0);
                    atualizaTabela(0);
                }
                case 1 -> {
                    funcionarios = funcController.ordenaFuncionarioPorFuncao();
                    geraColunasTabela(0);
                    atualizaTabela(0);
                }
                case 2 -> {
                    funcionarios = funcController.
                                   apresentaFuncionariosComBaseDoAniversario();
                    geraColunasTabela(0);
                    atualizaTabela(0);
                }
                case 3 -> {
                    funcionarioMaiorIdade = funcController
                                  .funcionarioComMaiorIdade();
                    geraColunasTabela(1);
                    atualizaTabela(1);
                }
                case 4 -> {
                    Collections.sort(funcionarios, 
                                 Comparator.comparing(Funcionario::getNome));
                    geraColunasTabela(0);
                    atualizaTabela(0);
                }
                case 5 -> {
                    totalSalarios.subtract(totalSalarios);
                    totalSalarios = totalSalarios
                            .add(funcController.totalSalarioFuncionarios());
                    geraColunasTabela(2);
                    atualizaTabela(2);
                }
                case 6 -> {
                    geraColunasTabela(3);
                    atualizaTabela(3);
                }
            }
        });
    }
    
    /**
     * Inicializa o Controller e a classe Funcionário utilizado por toda a view.
     */
    private void iniciaFuncionarios(){
        funcController = new FuncionarioController();
        funcionarios = funcController.insereFuncionariosQuestao();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizaSalario;
    private javax.swing.JButton btnRemoveJoao;
    private javax.swing.JComboBox<String> cmbAgrupamento;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaFuncionarios;
    // End of variables declaration//GEN-END:variables
}
